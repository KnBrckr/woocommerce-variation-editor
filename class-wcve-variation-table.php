<?php
/**
 * class wve_varation_Table
 *
 * WP_List_Table Class extension for managing product variation lists in admin menu
 *
 * Uses concepts implemented in sample plugin: http://wordpress.org/plugins/custom-list-table-example/
 *
 * @package WooCommerce Variation Editor
 * @author Kenneth J. Brucker <ken@action-a-day.com>
 * @copyright 2015 Kenneth J. Brucker (email: ken@action-a-day.com)
 * 
 * This file is part of hRecipe Microformat, a plugin for Wordpress.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2, as 
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 **/

// Protect from direct execution
if (!defined('WP_PLUGIN_DIR')) {
	header('Status: 403 Forbidden');
  header('HTTP/1.1 403 Forbidden');
  exit();
}

class wcve_variation_Table extends WP_List_Table {
	/**
	 * Constructor, we override the parent to pass our own arguments
	 * We usually focus on three parameters: singular and plural labels, as well as whether the class supports AJAX.
	 *
	 * Instances should be created via 'admin-init' action to avoid errors in back-end.
	 */
	 function __construct() { // FIXME - get list of product attributes to create table
 		error_log("__construct");
		 parent::__construct( array(
		'singular'=> 'wve_edit_variation', //Singular label
		'plural' => 'wve_edit_variations', //plural label, also this will be one of the table css class
		'ajax'	=> false //We won't support Ajax for this table
		) );
	 }
	 
 	/**
 	 * Provides extra navigation before and after ingredients table
 	 *
 	 * @return void
 	 **/
 	// function extra_tablenav( $which )
 	// {
 	// 	if ( 'top' == $which ) {
 	// 		echo "Before Table";
 	// 	} elseif ( 'bottom' == $which ) {
 	// 		echo "After Table";
 	// 	}
 	// }
	
	/**
	 * Define columns that are used in the table
	 *
	 * Array in form 'column_name' => 'column_title'
	 *
	 * The values's provided for bulk actions are defined in $this->column_cb()
	 *
	 * @return array $columns, array of columns
	 **/
	function get_columns()
	{
		error_log("in here");
		// FIXME Add columns for the defined product attributes
		$columns = array(
            'cb'      => '<input type="checkbox" />', //Render a checkbox instead of text
			'var_id' => 'ID',
			'thumbnail_id'   => 'Thumbnail',
			'pa_color' => 'Color',
			'pa_size' => 'Size',
			'sku' => 'SKU',
			'price' => 'Price',
			'sale_price' => 'Sale Price',
			'regular_price' => 'Regular Price',
			'manage_stock' => 'Manage Stock', // Checkbox
			'stock' => 'Stock Qty',
			'stock_status' => 'In Stock', // Checkbox
			'backorders' => 'Backorders?', // Checkbox
			'weight' => 'Weight',
			// 'dim' => 'Dimension',
			// 'enabled' => 'Enabled',
		);
		
		return $columns;
	}
	
	/**
	 * Define columns that are sortable
	 *
	 * Array in form 'column_name' => 'database_field_name'
	 *
	 * @return array $sortable, array of columns that can be sorted
	 **/
	// function get_sortable_columns()
	// {
	// 	$sortable = array(
	// 		'food_id' => array('food_id', false),
	// 		'ingrd' => array('ingrd', false)
	// 	);
	//
	// 	$sortable = array();
	// 	return $sortable;
	// }
	
	/**
	 * Define bulk actions that will work on table
	 *
	 * The actions are dealt with where this class is instantiated.  $this->current_action defines the action requested
	 *
	 * @return array Associative array of bulk actions in form 'slug' => 'visible title'
	 **/
	function get_bulk_actions()
	{
		// $actions = array(
		// 	'delete' => __('Delete')
		// );

		$actions = array();		
		return $actions;
	}
	
	/**
	 * Prepare table items for display
	 **/
	function prepare_items()
	{
		global $wpdb;
		$screen = get_current_screen();
			
		// Default sort ordering by variation id
	    $orderby = !empty($_REQUEST["orderby"]) ? mysql_real_escape_string($_REQUEST["orderby"]) : 'var_id';
	    $order = !empty($_REQUEST["order"]) ? mysql_real_escape_string($_REQUEST["order"]) : 'ASC';
		$orderby_clause =  'ORDER BY '.$orderby.' '.$order;
	    		
		/**
		 * Search string, if specified
		 */
		$search = !empty($_REQUEST["s"]) ? $_REQUEST["s"] : '';

		/**
		 * Pagination of table elements
		 */
        //How many to display per page?
        $perpage = $this->get_items_per_page('wve_variations_per_page', 20); // Default 20, but allow admin screen to set
        //Which page is this?
        $paged = !empty($_REQUEST["paged"]) ? $_REQUEST["paged"] : '';
		
		/**
		 * Get the table items
		 *
		 * Query is based on information from:
		 *  http://www.dbforums.com/showthread.php?1683775-WordPress-Pivot-Query
		 *  http://stackoverflow.com/questions/11654632/turning-a-wordpress-post-meta-table-into-an-easier-to-use-view
		 *  http://wordpress.stackexchange.com/questions/38530/most-efficient-way-to-get-posts-with-postmeta
		 */
		
		$query = "
			SELECT dt.* FROM (
			SELECT  p.ID as var_id,
			        MAX(CASE WHEN pm.meta_key = 'attribute_pa_color' then pm.meta_value ELSE NULL END) as pa_color,
			        MAX(CASE WHEN pm.meta_key = 'attribute_pa_size' then pm.meta_value ELSE NULL END) as pa_size,
			        MAX(CASE WHEN pm.meta_key = '_sku' then pm.meta_value ELSE NULL END) as sku,
			        MAX(CASE WHEN pm.meta_key = '_thumbnail_id' then pm.meta_value ELSE NULL END) as thumbnail_id,
			        MAX(CASE WHEN pm.meta_key = '_weight' then pm.meta_value ELSE NULL END) as weight,
			        MAX(CASE WHEN pm.meta_key = '_length' then pm.meta_value ELSE NULL END) as length,
			        MAX(CASE WHEN pm.meta_key = '_width' then pm.meta_value ELSE NULL END) as width,
			        MAX(CASE WHEN pm.meta_key = '_height' then pm.meta_value ELSE NULL END) as height,
			        MAX(CASE WHEN pm.meta_key = '_manage_stock' then pm.meta_value ELSE NULL END) as manage_stock,
			        MAX(CASE WHEN pm.meta_key = '_stock_status' then pm.meta_value ELSE NULL END) as stock_status,
			        MAX(CASE WHEN pm.meta_key = '_backorders' then pm.meta_value ELSE NULL END) as backorders,
			        MAX(CASE WHEN pm.meta_key = '_stock' then pm.meta_value ELSE NULL END) as stock,
			        MAX(CASE WHEN pm.meta_key = '_regular_price' then pm.meta_value ELSE NULL END) as regular_price,
			        MAX(CASE WHEN pm.meta_key = '_sale_price' then pm.meta_value ELSE NULL END) as sale_price,
			        MAX(CASE WHEN pm.meta_key = '_sale_price_dates_from' then pm.meta_value ELSE NULL END) as sale_price_dates_from,
			        MAX(CASE WHEN pm.meta_key = '_sale_price_dates_to' then pm.meta_value ELSE NULL END) as sale_price_dates_to,
			        MAX(CASE WHEN pm.meta_key = '_price' then pm.meta_value ELSE NULL END) as price
			FROM    $wpdb->posts p 
			LEFT JOIN $wpdb->postmeta pm ON ( pm.post_id = p.ID)
			WHERE
			   p.post_type = 'product_variation' and p.post_status = 'publish' and p.post_parent = 2322
			GROUP BY
			   p.ID,p.post_title
			) as dt
			$orderby_clause
		";


		/**
		 * Pagination of table elements
		 */
        // Number of elements in table?
        $totalitems = $wpdb->query($query); //return the total number of affected rows
        //Which page is this?
        $paged = !empty($paged) ? mysql_real_escape_string($paged) : '';
        //Page Number
        if(empty($paged) || !is_numeric($paged) || $paged<=0 ){ $paged=1; }
        //adjust the query to take pagination into account
	    if(!empty($paged) && !empty($perpage)){
		    $offset=($paged-1)*$perpage;
    		$query.=' LIMIT '.(int)$offset.','.(int)$perpage;
	    }
		
		$this->items = $wpdb->get_results($query);

        //How many pages do we have in total?
        $totalpages = ceil($totalitems/$perpage);
	
		/**
		 * Setup pagination links
		 */
		$this->set_pagination_args( array(
			"total_items" => $totalitems,
			"total_pages" => $totalpages,
			"per_page" => $perpage,
		) );
	}
	
	/**
	 * Method to provide checkbox column in table
	 *
	 * Provides the REQUEST variable that will contain the selected values
	 *
     * @see WP_List_Table::::single_row_columns()
	 * @param $item array of row data for presentation
	 * @return string Text or HTML to be placed in table cell
	 **/
	function column_cb($item)
	{
        return sprintf(
            '<input type="checkbox" name="%1$s[]" value="%2$s" />',
            /*$1%s*/ $this->_args['singular'],  // Let's simply repurpose the table's singular label
            /*$2%s*/ $item->var_id              // The value of the checkbox should be the record's id
        );
	}
	
	/**
	 * Default formatting for column data
	 *
	 * @param array $item, row of data for presentation
	 * @param string, $column_name
	 * @return string, formatted column data
	 */
	function column_default($item,$column_name)
	{
		return esc_attr($item->$column_name);
	}
		
	/**
	 * Method to provide HTML for thumbnail
	 *
     * @see WP_List_Table::::single_row_columns()
	 * @param $item array of row data for presentation
	 * @return string Text or HTML
	 **/
	function column_thumbnail_id($item)
	{
		$image = wp_get_attachment_image( $item->thumbnail_id, array(40,40) );
		return "$image";
	}
	
	/**
	 * Echo text when no items are found in the table
	 *
	 * @return void
	 **/
	function no_items()
	{
		_e('No variations found.', 'aad-wcve');
	}
}		

?>