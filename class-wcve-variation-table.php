<?php
/**
 * class wve_varation_Table
 *
 * WP_List_Table Class extension for managing product variation lists in admin menu
 *
 * Uses concepts implemented in sample plugin: http://wordpress.org/plugins/custom-list-table-example/
 *
 * @package WooCommerce Variation Editor
 * @author Kenneth J. Brucker <ken@action-a-day.com>
 * @copyright 2015 Kenneth J. Brucker (email: ken@action-a-day.com)
 * 
 * This file is part of hRecipe Microformat, a plugin for Wordpress.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2, as 
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 **/

defined( 'ABSPATH' ) or die( 'I\'m Sorry Dave, I can\'t do that!' );

class wcve_variation_Table extends WP_List_Table {
	/**
	 * Variable Product ID to be displayed
	 *
	 * @var int
	 */
	private $product_id = NULL;
	
	/**
	 * Product variations available
	 *
	 * @var array
	 */
	private $variations;
	
	/**
	 * Array of available backorder options for building select statement
	 *
	 * @var array
	 */
	private $backorder_options;
	
	/**
	 * Constructor, we override the parent to pass our own arguments
	 * We usually focus on three parameters: singular and plural labels, as well as whether the class supports AJAX.
	 *
	 * FIXME Instances should be created via 'admin-init' action to avoid errors in back-end.
	 */
	 function __construct() { // FIXME - get list of product attributes to create table
		 parent::__construct( array(
		'singular'=> 'wve_edit_variation', //Singular label
		'plural' => 'wve_edit_variations', //plural label, also this will be one of the table css class
		'ajax'	=> false //We won't support Ajax for this table
		) );
		
		$this->backorder_options = array(
			'no'     => __( 'No', 'aad-wcve' ),
			'notify' => __( 'Notify', 'aad-wcve' ),
			'yes'    => __( 'Allow', 'aad-wcve' )
		);
	 }
	 
	 /**
	  * Set Product ID that will be used for building table
	  *
	  * @return void
	  */
	 function set_product($product_id)
	 {
		 $this->product_id = $product_id;
	 }
	 
	 /**
	  * Set Product Variations used by the product
	  *
	  * @return void
	  */
	 function set_variations($variations)
	 {
		 $this->variations = $variations;
	 }
	 
 	/**
 	 * Provides extra navigation before and after variation table
 	 *
 	 * @return void
 	 **/
	function extra_tablenav( $which )
	{
		?>
		<div class="alignleft actions">
			<?php
			if ( 'top' == $which ) {
				/**
				 * Display Filtering drop-downs for each variation property
				 */
				$this->variation_dropdowns();
				
				/**
				 * Display button to apply filter
				 */
				submit_button( __( 'Filter' ), 'button', 'filter_action', false, array( 'id' => 'aad-wcve-query-submit' ) );
			} elseif ( 'bottom' == $which ) {
			}
			?>
		</div>
		<?php
	}
	
	/**
	 * Render drop-down selectors for each variation property
	 *
	 * @return void
	 * @author Kenneth J. Brucker <ken.brucker@action-a-day.com>
	 */
	private	function variation_dropdowns()
	{
		foreach ($this->variations as $slug => $variation) {
			$selected = isset($_REQUEST["variation_${slug}"]) ? esc_attr($_REQUEST["variation_${slug}"]) : "all";
			?>
			<label for="filter_by_<?php echo $slug ?>" class="screen-reader-text"><?php echo wc_attribute_label($slug); ?></label>
			<select name="variation_<?php echo $slug; ?>" id="filter_by_<?php echo $slug; ?>">
				<option value="all">Any <?php echo wc_attribute_label($slug); ?>...</option>
				<?php
				foreach ($variation as $value) {
					printf("<option value='%s' %s>%s</option>\n", 
						esc_attr($value['slug']),
						selected($selected, esc_attr($value['slug']), false),
						esc_attr($value['name'])
					);
				}
				?>
			</select>
			<?php
		}
	}
	
	/**
	 * Define columns that are used in the table
	 *
	 * Array in form 'column_name' => 'column_title'
	 *
	 * The values's provided for bulk actions are defined in $this->column_cb()
	 *
	 * @return array $columns, array of columns
	 **/
	function get_columns()
	{
		$columns = array(
            // 'cb'      => '<input type="checkbox" />', //Render a checkbox instead of text
			'var_id' => 'ID',
			'thumbnail_id'   => 'Thumbnail'
		);

		// Insert columns for the product variations
		foreach ($this->variations as $key=>$variation) {
			$columns['attribute_'.$key] = wc_attribute_label($key);
		}
		
		if (wc_product_sku_enabled())
			$columns['sku'] = __('SKU', 'woocommerce');
		
		$columns = array_merge($columns, array(
			'regular_price' => 'Price (' . get_woocommerce_currency_symbol() . ')',
			'sale_price' => 'Sale Price (' . get_woocommerce_currency_symbol() . ')'
		));
		
		if ( 'yes' == get_option( 'woocommerce_manage_stock' ) ) {
			$columns = array_merge($columns, array(
				'manage_stock' => __('Manage stock?', 'woocommerce'), // Checkbox
				'stock' => 'Stock Qty',
				'stock_status' => __( 'In stock', 'woocommerce' ), // Checkbox
				'backorders' => __( 'Allow Backorders?', 'woocommerce' ) // Dropdown
			));
		}
		
		if (wc_product_weight_enabled())
			$columns['weight'] =  __( 'Weight', 'woocommerce' ) . ' (' . esc_html( get_option( 'woocommerce_weight_unit' ) ) . ')';
		
		if (wc_product_dimensions_enabled())
			$columns['dimensions'] =  __( 'Dimensions (L&times;W&times;H)', 'woocommerce' ) . ' (' . esc_html( get_option( 'woocommerce_dimension_unit' ) ) . ')';

		return $columns;
	}
	
	/**
	 * Define columns that are sortable
	 *
	 * Array in form 'column_name' => 'database_field_name'
	 *
	 * @return array $sortable, array of columns that can be sorted
	 **/
	function get_sortable_columns()
	{
		$sortable = array(
			'stock' => array('stock', false),
			'price' => array('price', false),
			'sale_price' => array('sale_price', false),
			'regular_price' => array('regular_price', false)
		);
		
		// Allow sorting on the defined product variations
		foreach ($this->variations as $key=>$variation) {
			$sortable['attribute_'.$key] = array('attribute_'.$key, false);
		}
		
		return $sortable;
	}
	
	/**
	 * Define bulk actions that will work on table
	 *
	 * The actions are dealt with where this class is instantiated.  $this->current_action defines the action requested
	 *
	 * @return array Associative array of bulk actions in form 'slug' => 'visible title'
	 **/
	function get_bulk_actions()
	{
		// $actions = array(
		// 	'delete' => __('Delete')
		// );

		$actions = array();		
		return $actions;
	}
	
	/**
	 * Prepare table items for display
	 **/
	function prepare_items()
	{
		global $wpdb;
		$screen = get_current_screen();
		
		if (! $this->product_id) {
			$this->items = array();
			$this->set_pagination_args( array(
				"total_items" => 0,
				"total_pages" => 0,
				"per_page" => 0,
			) );
			return;
		}
		
		$parent_data = array();
		$parent_data['sku'] = get_post_meta($this->product_id, '_sku', true);
		$parent_data['weight'] = get_post_meta($this->product_id, '_weight', true);
		$parent_data['length'] = get_post_meta($this->product_id, '_length', true);
		$parent_data['width'] = get_post_meta($this->product_id, '_width', true);
		$parent_data['height'] = get_post_meta($this->product_id, '_height', true);
		$this->parent_data = $parent_data;
			
		// Default sort ordering by variation id
	    $orderby = !empty($_REQUEST["orderby"]) ? esc_attr($_REQUEST["orderby"]) : 'var_id';
	    $order = !empty($_REQUEST["order"]) ? esc_attr($_REQUEST["order"]) : 'ASC';
		$orderby_clause =  'ORDER BY '.$orderby.' '.$order;
	    		
		/**
		 * Search string, if specified
		 */
		$search = !empty($_REQUEST["s"]) ? $_REQUEST["s"] : '';
		
		/**
		 * Add requested Filters
		 */
		$filter = "TRUE";
		foreach ($this->variations as $slug => $variation) {
			if (isset($_REQUEST["variation_${slug}"])) {
				$value = esc_attr($_REQUEST["variation_${slug}"]);
				if ('all' == $value) continue;
				$filter .= " and attribute_${slug} = '$value'";
			}
		}

		/**
		 * Get the table items
		 *
		 * Query is based on information from:
		 *  http://www.dbforums.com/showthread.php?1683775-WordPress-Pivot-Query
		 *  http://stackoverflow.com/questions/11654632/turning-a-wordpress-post-meta-table-into-an-easier-to-use-view
		 *  http://wordpress.stackexchange.com/questions/38530/most-efficient-way-to-get-posts-with-postmeta
		 */
		
		$query = "
			SELECT dt.* FROM (
			SELECT  p.ID as var_id,";
			
		/**
		 * Add the variation attributes to selection
		 */
		foreach ($this->variations as $key=>$variation) {
			$query .= "MAX(CASE WHEN pm.meta_key = 'attribute_${key}' then pm.meta_value ELSE NULL END) as attribute_${key},";
		}
		
		/**
		 * Add other meta items and complete the query
		 */
		$query .= "
			        MAX(CASE WHEN pm.meta_key = '_sku' then pm.meta_value ELSE NULL END) as sku,
			        MAX(CASE WHEN pm.meta_key = '_thumbnail_id' then pm.meta_value ELSE NULL END) as thumbnail_id,
			        MAX(CASE WHEN pm.meta_key = '_weight' then pm.meta_value ELSE NULL END) as weight,
			        MAX(CASE WHEN pm.meta_key = '_length' then pm.meta_value ELSE NULL END) as length,
			        MAX(CASE WHEN pm.meta_key = '_width' then pm.meta_value ELSE NULL END) as width,
			        MAX(CASE WHEN pm.meta_key = '_height' then pm.meta_value ELSE NULL END) as height,
			        MAX(CASE WHEN pm.meta_key = '_manage_stock' then pm.meta_value ELSE NULL END) as manage_stock,
			        MAX(CASE WHEN pm.meta_key = '_stock_status' then pm.meta_value ELSE NULL END) as stock_status,
			        MAX(CASE WHEN pm.meta_key = '_backorders' then pm.meta_value ELSE NULL END) as backorders,
			        MAX(CASE WHEN pm.meta_key = '_stock' then pm.meta_value ELSE NULL END) as stock,
			        MAX(CASE WHEN pm.meta_key = '_regular_price' then pm.meta_value ELSE NULL END) as regular_price,
			        MAX(CASE WHEN pm.meta_key = '_sale_price' then pm.meta_value ELSE NULL END) as sale_price
			FROM    $wpdb->posts p 
			LEFT JOIN $wpdb->postmeta pm ON ( pm.post_id = p.ID)
			WHERE
			   p.post_type = 'product_variation' and p.post_status = 'publish' and p.post_parent = $this->product_id
			GROUP BY
			   p.ID,p.post_title
			) as dt where $filter
			$orderby_clause
		";

		/**
		 * Pagination of table elements
		 */
        // Number of elements in table?
        $totalitems = $wpdb->query($query); //returns the total number of affected rows
        //How many to display per page?
        $perpage = $this->get_items_per_page('wve_variations_per_page', 20); // Default 20, but allow admin screen to set
        //Which page is this?
		$current_page = absint($this->get_pagenum());
		$offset = ($current_page - 1) * $perpage;
        //How many pages do we have in total?
        $totalpages = ceil($totalitems/$perpage);
		$query .= ' LIMIT ' . $offset . ',' . $perpage;

		// Do the query
		$this->items = $wpdb->get_results($query);

		/**
		 * Setup pagination links
		 */
		$this->set_pagination_args( array(
			"total_items" => $totalitems,
			"total_pages" => $totalpages,
			"per_page" => $perpage,
		) );
	}
	
	/**
	 * Default formatting for column data
	 *
	 * @param array $item, row of data for presentation
	 * @param string, $column_name
	 * @return string, formatted column data
	 */
	function column_default($item, $column_name)
	{
		/**
		 * If handling an attribute column, no input should be provided
		 */
		if (substr($column_name, 0, 10) == 'attribute_') {
			$terms = get_term_by('slug', esc_attr($item->$column_name), substr($column_name, 10));
			return is_object($terms) ? $terms->name : $item->column_name;
		}
		else
			return "<input type='text' size='5' name='${column_name}[$item->var_id]' value='" . 
				esc_attr($item->$column_name) . "' class=\"wcve-cell\" />";
	}
		
	/**
	 * Method to provide checkbox column in table
	 *
	 * Provides the REQUEST variable that will contain the selected values
	 *
     * @see WP_List_Table::::single_row_columns()
	 * @param $item array of row data for presentation
	 * @return string Text or HTML to be placed in table cell
	 **/
	function column_cb($item)
	{
        return sprintf(
            '<input type="checkbox" name="%1$s[]" value="%2$s" />',
            /*$1%s*/ $this->_args['singular'],  // Let's simply repurpose the table's singular label
            /*$2%s*/ $item->var_id              // The value of the checkbox should be the record's id
        );
	}
	
	/**
	 * Method to provide HTML for variation ID
	 *
     * @see WP_List_Table::::single_row_columns()
	 * @param $item array of row data for presentation
	 * @return string Text or HTML
	 **/
	function column_var_id($item)
	{
		return esc_attr($item->var_id);
	}
	
	/**
	 * Method to provide HTML for thumbnail image
	 *
     * @see WP_List_Table::::single_row_columns()
	 * @param $item array of row data for presentation
	 * @return string Text or HTML
	 **/
	function column_thumbnail_id($item)
	{
		$image = wp_get_attachment_image($item->thumbnail_id, array(40,40));
		if (empty($image)) $image = wc_placeholder_img(array(40,40)); // Use placeholder if no thumbnail available
		$remove = $item->thumbnail_id > 0 ? 'remove' : '';
		return "<a href=\"#\" class=\"upload_image_button $remove\" rel=\"$item->var_id\">$image<input type=\"hidden\" name=\"upload_image_id[$item->var_id]\" class=\"upload_image_id wcve-cell\" value=\"" .esc_attr( $item->thumbnail_id) . "\" /></a>";
	}
	
	/**
	 * Method to provide HTML for SKU
	 *
     * @see WP_List_Table::::single_row_columns()
	 * @param $item array of row data for presentation
	 * @return string Text or HTML
	 **/
	function column_sku($item)
	{
		return "<input type='text' size='5' name='sku[$item->var_id]' value='" . esc_attr($item->sku) . 
			"' placeholder='" . esc_attr($this->parent_data['sku']) . "' class=\"wcve-cell\" />";
	}
	
	/**
	 * Method to provide HTML for regular price
	 *
     * @see WP_List_Table::::single_row_columns()
	 * @param $item array of row data for presentation
	 * @return string Text or HTML
	 **/
	function column_regular_price($item)
	{
		$price = esc_attr($item->regular_price);
		$placeholder = __( 'Required', 'aad-wcve' );
		return "<input type=\"text\" size=\"5\" name=\"regular_price[$item->var_id]\" value=\"$price\" class=\"wc_input_price wcve-cell\" placeholder=\"$placeholder\" />";
	}
	
	/**
	 * Method to provide HTML for sale price
	 *
     * @see WP_List_Table::::single_row_columns()
	 * @param $item array of row data for presentation
	 * @return string Text or HTML
	 **/
	function column_sale_price($item)
	{
		$price = esc_attr($item->sale_price);
		return "<input type=\"text\" size=\"5\" name=\"sale_price[$item->var_id]\" value=\"$price\" class=\"wc_input_price wcve-cell\" />";
	}

	/**
	 * Method to provide HTML for manage_stock checkbox
	 *
     * @see WP_List_Table::::single_row_columns()
	 * @param $item array of row data for presentation
	 * @return string Text or HTML
	 **/
	function column_manage_stock($item)
	{
		$html = "<input type=\"hidden\" name=\"orig_manage_stock[$item->var_id]\" value=\"$item->manage_stock\">";
        $html .= "<input type=\"checkbox\" name=\"manage_stock[$item->var_id]\" value=\"yes\" " .
			checked($item->manage_stock, "yes", false) . "  />";
		return $html;
	}
	
	/**
	 * Method to provide HTML for manage_stock checkbox
	 *
     * @see WP_List_Table::::single_row_columns()
	 * @param $item array of row data for presentation
	 * @return string Text or HTML
	 **/
	function column_stock_status($item)
	{
		$html = "<input type=\"hidden\" name=\"orig_stock_status[$item->var_id]\" value=\"$item->stock_status\">";
		$html .= "<input type=\"checkbox\" name=\"stock_status[$item->var_id]\" value=\"instock\" " .
			checked($item->stock_status, "instock", false) . "/>";
		return $html;
	}
	
	/**
	 * Method to provide HTML for stock
	 *
     * @see WP_List_Table::::single_row_columns()
	 * @param $item array of row data for presentation
	 * @return string Text or HTML
	 **/
	function column_stock($item)
	{
		$stock = esc_attr($item->stock);
		return "<input type=\"number\" size=\"5\" name=\"stock[$item->var_id]\" value=\"$stock\" step=\"any\" class=\"wcve-cell\" />";
	}
	
	/**
	 * Method to provide HTML for allow backorders
	 *
     * @see WP_List_Table::::single_row_columns()
	 * @param $item array of row data for presentation
	 * @return string Text or HTML
	 **/
	function column_backorders($item)
	{
		$html = "<input type=\"hidden\" name=\"orig_backorders[$item->var_id]\" value=\"$item->backorders\">";
		$html .= "<select name=\"backorders[$item->var_id]\">";
				foreach ( $this->backorder_options as $key => $value ) {
					$html .= '<option value="' . esc_attr( $key ) . '" ' . 
						selected( $key === $item->backorders, true, false ) . '>' . esc_html( $value ) . '</option>';
				}
		$html .= '</select>';
		return $html;
	}
	
	
	/**
	 * Method to provide HTML for Dimensions
	 *
     * @see WP_List_Table::::single_row_columns()
	 * @param $item array of row data for presentation
	 * @return string Text or HTML
	 **/
	function column_dimensions($item)
	{
		static $abbrev = array('length'=>'L', 'width'=>'W', 'height'=>'H');
		$html = "";
		$id = $item->var_id;
		
		foreach (array('length', 'width', 'height') as $dim) {
			$html .= "<div>";
			$html .= "<label for='product_${dim}_${id}'>" . $abbrev[$dim] . ":</label>";
			$html .= "<input type='text' name='${dim}[${id}]' value='" . $item->$dim . "' id='product_${dim}_${id}' placeholder='" . esc_attr( $this->parent_data[$dim] ) . "' class='input-text wc_input_decimal wcve-cell' size='6'>";
			$html .= "</div>";
			
		}
		// $html = "<input id=\"product_length_" . $item->var_id . "\" class=\"input-text wc_input_decimal wcve-cell\" size=\"6\" type=\"text\" name=\"length[$item->var_id]\" value=\"$item->length\" placeholder=\"" . esc_attr( $this->parent_data['length'] ) . "\" /> ";
		// $html .= "W:<input id=\"product_width_" . $item->var_id . "\" class=\"input-text wc_input_decimal wcve-cell\" size=\"6\" type=\"text\" name=\"width[$item->var_id]\" value=\"$item->width\" placeholder=\"" . esc_attr( $this->parent_data['width'] ) . "\" /> ";
		// $html .= "H:<input id=\"product_height_" . $item->var_id . "\" class=\"input-text wc_input_decimal wcve-cell\" size=\"6\" type=\"text\" name=\"height[$item->var_id]\" value=\"$item->height\" placeholder=\"" . esc_attr( $this->parent_data['height'] ) . "\" /> ";
		return $html;
	}
	
	/**
	 * Echo text when no items are found in the table
	 *
	 * @return void
	 **/
	function no_items()
	{
		_e('No variations found.', 'aad-wcve');
	}
}		

?>